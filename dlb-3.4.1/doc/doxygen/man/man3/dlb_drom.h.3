.TH "dlb_drom.h" 3 "Fri Aug 16 2024" "Version 3.4.1" "Dynamic Load Balance" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dlb_drom.h
.SH SYNOPSIS
.br
.PP
\fC#include 'dlb_types\&.h'\fP
.br
\fC#include 'dlb_errors\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBDLB_DROM_Attach\fP (void)"
.br
.RI "Attach current process to DLB system as DROM administrator\&. "
.ti -1c
.RI "int \fBDLB_DROM_Detach\fP (void)"
.br
.RI "Detach current process from DLB system\&. "
.ti -1c
.RI "int \fBDLB_DROM_GetNumCpus\fP (int *ncpus)"
.br
.RI "Get the number of CPUs in the node\&. "
.ti -1c
.RI "int \fBDLB_DROM_GetPidList\fP (int *pidlist, int *nelems, int max_len)"
.br
.RI "Get the list of running processes registered in the DLB system\&. "
.ti -1c
.RI "int \fBDLB_DROM_GetProcessMask\fP (int pid, \fBdlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags)"
.br
.RI "Get the process mask of the given PID\&. "
.ti -1c
.RI "int \fBDLB_DROM_SetProcessMask\fP (int pid, \fBconst_dlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags)"
.br
.RI "Set the process mask of the given PID\&. "
.ti -1c
.RI "int \fBDLB_DROM_PreInit\fP (int pid, \fBconst_dlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags, char ***next_environ)"
.br
.RI "Make room in the system for a new process with the given mask\&. "
.ti -1c
.RI "int \fBDLB_DROM_PostFinalize\fP (int pid, \fBdlb_drom_flags_t\fP flags)"
.br
.RI "Unregister a process from the DLB system\&. "
.ti -1c
.RI "int \fBDLB_DROM_RecoverStolenCpus\fP (int pid)"
.br
.RI "Recover previously stolen CPUs if they are idle\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int DLB_DROM_Attach (void)"

.PP
Attach current process to DLB system as DROM administrator\&. 
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success
.RE
.PP
Once the process is attached to DLB as DROM administrator, it may perform the below actions described in this file\&. This way, the process is able to query or modify other DLB running processes' IDs and processes masks, as well as to make room in the system for creating another running process\&. 
.SS "int DLB_DROM_Detach (void)"

.PP
Detach current process from DLB system\&. 
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_ERR_NOSHMEM if cannot find shared memory to dettach from
.RE
.PP
If previously attached, a process must call this function to correctly close file descriptors and clean data\&. 
.SS "int DLB_DROM_GetNumCpus (int * ncpus)"

.PP
Get the number of CPUs in the node\&. 
.PP
\fBParameters\fP
.RS 4
\fIncpus\fP the number of CPUs 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.RE
.PP

.SS "int DLB_DROM_GetPidList (int * pidlist, int * nelems, int max_len)"

.PP
Get the list of running processes registered in the DLB system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpidlist\fP The output list 
.br
\fInelems\fP Number of elements in the list 
.br
\fImax_len\fP Max capacity of the list 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_ERR_NOSHMEM if cannot find shared memory 
.RE
.PP

.SS "int DLB_DROM_GetProcessMask (int pid, \fBdlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags)"

.PP
Get the process mask of the given PID\&. 
.PP
\fBParameters\fP
.RS 4
\fIpid\fP Process ID to query its process mask, or 0 if current process 
.br
\fImask\fP Current process mask of the target process 
.br
\fIflags\fP DROM options 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_NOTED if a new mask is given for the current process (replaces PollDROM) 
.PP
DLB_ERR_NOPROC if target pid is not registered in the DLB system 
.PP
DLB_ERR_TIMEOUT if the query is synchronous and times out
.RE
.PP
Accepted flags for this function:
.br
 DLB_SYNC_QUERY: Synchronous query\&. If the target process has any pending operations, the caller process gets blocked until the target process resolves them, or the query times out\&. 
.SS "int DLB_DROM_SetProcessMask (int pid, \fBconst_dlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags)"

.PP
Set the process mask of the given PID\&. 
.PP
\fBParameters\fP
.RS 4
\fIpid\fP Target Process ID to apply a new process mask, or 0 if current process 
.br
\fImask\fP Process mask to set 
.br
\fIflags\fP DROM options 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_ERR_NOPROC if target pid is not registered in the DLB system 
.PP
DLB_ERR_PDIRTY if target pid already has a pending operation 
.PP
DLB_ERR_TIMEOUT if the query is synchronous and times out 
.PP
DLB_ERR_PERM if the provided mask could not be stolen
.RE
.PP
Accepted flags for this function:
.br
 DLB_SYNC_QUERY: Synchronous query\&. If the target process has any pending operations, the caller process gets blocked until the target process resolves them, or the query times out\&.
.br
 DLB_SYNC_NOW: -- DEPRECATED, ENABLED BY DEFAULT unless DLB_NO_SYNC is used -- If the target pid is 0, or self pid, and the new mask can be immediate applied, force mask synchronization\&. This operation automatically forces the synchronization with the set_process_mask callback\&. It has the equivalent behaviour as invoking \fBDLB_PollDROM_Update()\fP after a successful operation\&.
.br
 DLB_NO_SYNC: Only if the target is the current process, disable automatic mask synchronization 
.SS "int DLB_DROM_PreInit (int pid, \fBconst_dlb_cpu_set_t\fP mask, \fBdlb_drom_flags_t\fP flags, char *** next_environ)"

.PP
Make room in the system for a new process with the given mask\&. 
.PP
\fBParameters\fP
.RS 4
\fIpid\fP Process ID that gets the reservation 
.br
\fImask\fP Process mask to register 
.br
\fIflags\fP DROM options 
.br
\fInext_environ\fP environment to modify if the process is going to fork-exec 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_ERR_NOSHMEM if cannot find shared memory 
.PP
DLB_ERR_INIT if the process is already registered 
.PP
DLB_ERR_TIMEOUT if the query is synchronous and times out 
.PP
DLB_ERR_PERM if the provided mask overlaps with an existing registered process and stealing option is not set
.RE
.PP
Accepted flags for this function:
.br
 DLB_STEAL_CPUS: Steal CPU ownership if necessary\&. If any CPU in mask is already registered in the system, steal the ownership from their original process\&.
.br
 DLB_RETURN_STOLEN: Return stolen CPUs when this process finalizes\&. If any CPU was stolen during the preinitialization, try to return those CPUs to their owners if they still exist\&.
.br
 DLB_SYNC_QUERY: Synchronous query\&. If the preinitialization needs to steal some CPU, the stealing operation is synchronous and thus will wait until the target process can release its CPU instead of causing oversubscription\&. This option may cause a time out if the target process does not update its mask in time\&.
.PP
This function can be called to preinitialize a future DLB running process, even if the current process ID does not match the future process, probably due to fork-exec mechanisms\&. Though in this case we need to modify the environment in order to not loose the preinitialization info\&.
.PP
Even if preinialized, a running process still needs to call \fBDLB_Init()\fP and \fBDLB_Finalize()\fP to take full advantage of all DLB features, but it is not mandatory\&. 
.SS "int DLB_DROM_PostFinalize (int pid, \fBdlb_drom_flags_t\fP flags)"

.PP
Unregister a process from the DLB system\&. 
.PP
\fBParameters\fP
.RS 4
\fIpid\fP Process ID to unregister 
.br
\fIflags\fP DROM options 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_ERR_NOSHMEM if cannot find shared memory 
.PP
DLB_ERR_NOPROC if target pid is not registered in the DLB system
.RE
.PP
Accepted flags for this function:
.br
 DLB_RETURN_STOLEN: Return stolen CPUs when this process finalizes\&. If any CPU was stolen during the preinitialization, try to return those CPUs to their owners if they still exist\&.
.PP
This function should be called after a preinitialized child process has finished its execution\&.
.PP
If the child process was DLB aware and called \fBDLB_Init()\fP and \fBDLB_Finalize()\fP, this function will return DLB_ERR_NOPROC, although that should not be considered as a wrong scenario\&. 
.SS "int DLB_DROM_RecoverStolenCpus (int pid)"

.PP
Recover previously stolen CPUs if they are idle\&. 
.PP
\fBParameters\fP
.RS 4
\fIpid\fP Process ID 
.RE
.PP
\fBReturns\fP
.RS 4
DLB_SUCCESS on success 
.PP
DLB_NOUPDT if the given process has not stolen CPUs 
.PP
DLB_ERR_NOSHMEM if cannot find shared memory 
.PP
DLB_ERR_NOPROC if target pid is not registered in the DLB system
.RE
.PP
If a running process abandoned the system without returning the previously stolen CPUs, this function may be called at any time to check if the target process is able to recover some of its original CPUs\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Dynamic Load Balance from the source code\&.
